@online{DilbertKubernetes,
	ALTauthor = {Scott Adams},
	ALTeditor = {editor},
	title = {Dilbert on Kubernetes},
	date = {2017-08-11},
	url = {https://miro.medium.com/max/1024/1*R0DEnf_7sjswuBHouioQFg.jpeg},
	OPTlanguage = {english},
	OPTversion = {1},
	OPTorganization = {Dilbert},
	OPTdate = {11},
	OPTmonth = {08},
	OPTyear = {2017},
	OPTaddendum = {addendum},
	OPTpubstate = {11-08-2017},
	OPTurldate = {05-03-2020},
}


@ARTICLE{IEEE1220-2005SystemsEng, 
author={IEEE}, 
journal={IEEE Std 1220-2005 (Revision of IEEE Std 1220-1998)}, 
title={IEEE Standard for Application and Management of the Systems Engineering Process}, 
year={2005}, 
pages={1-96}, 
abstract={The interdisciplinary tasks that are required throughout a system's life cycle to transform stakeholder needs, requirements, and constraints into a system solution are defined. This standard is intended to guide the development of systems for commercial, government, military, and space applications. The information applies to a project within an enterprise that is responsible for developing a product design and establishing the life cycle infrastructure needed to provide for life cycle sustainment.}, 
keywords={IEEE Standards;Systems engineering and theory;ISO Standards;Software;Portable document format;IEC Standards;acquire;analysis;architecture;building block;design;development;component;hardware;interface;life cycle processes;software;supplier;synthesis;system life cycle;system engineering;technical management;validation;verification}, 
doi={10.1109/IEEESTD.2005.96469}, 
}

@online{VolereSnowCard,
	ALTauthor = {Atlantic Systems Guild Ltd},
    ALTeditor = {James & Suzanne Robertson},
	title = {Atomic Requirement Download},
	date = {2019-08-19},
	url = {https://www.volere.org/atomic-requirement-download/},
	OPTlanguage = {english},
	OPTorganization = {Atlantic Systems Guild Ltd},
	OPTdate = {19.},
	OPTmonth = {August},
	OPTyear = {2019},
	OPTpubstate = {öffentlich/kostenlos},
	OPTurldate = {20190819-10:30Uhr},
}

@online{VolereRequirmentsSpecTemplate,
	ALTauthor = {Atlantic Systems Guild Ltd},
    ALTeditor = {James & Suzanne Robertson},
	title = {Volere Requirements Specification Template},
	date = {2019-08-19},
	url = {https://www.volere.org/templates/volere-requirements-specification-template/},
	OPTlanguage = {english},
	OPTversion = {18 --- 2017},
	OPTorganization = {Atlantic Systems Guild Ltd},
	OPTdate = {19.},
	OPTmonth = {August},
	OPTyear = {2019},
	OPTpubstate = {kostenpflichtig},
	OPTurldate = {20190819-10:30Uhr},
}

@book{partsch_requirements-engineering_2010,
	address = {Berlin},
	edition = {2., überarb. und erw. Aufl},
	series = {{eXamen}.press},
	title = {Requirements-{Engineering} systematisch: {Modellbildung} für softwaregestützte {Systeme}},
	isbn = {9783642053580 9783642053573},
	shorttitle = {Requirements-{Engineering} systematisch},
	url = {http://dx.doi.org/10.1007/978-3-642-05358-0},
	language = {ger},
	publisher = {Springer},
	author = {Partsch, Helmuth},
	year = {2010},
	note = {OCLC: 845656932}
}

@inproceedings{institute_of_electrical_and_electronics_engineers_cloud_2011,
	address = {Wuhan, China},
	title = {Cloud {Computing}: {Deployment} {Models}, {Delivery} {Models}, {Risks} and {Research} {Challenges}},
	isbn = {9781424492831 9781424492824},
	url = {https://ieeexplore.ieee.org/abstract/document/5778816},
	doi = {10.1109/CAMAN.2011.5778816},
	language = {eng},
	publisher = {IEEE},
	editor = {{Institute of Electrical and Electronics Engineers}},
	year = {2011},
	note = {OCLC: 838686677},
	pages = {1--4}
}

@misc{dindeutsches_institut_fur_normung_informationstechnik_2020,
	title = {Informationstechnik - {Sicherheitsverfahren} - {Informationssicherheitsmanagementsysteme} - {Anforderungen} ({ISO}/{IEC} 27001:2013 einschließlich {Cor} 1:2014 und {Cor} 2:2015); {Deutsche} {Fassung} {EN} {ISO}/{IEC} 27001:2017},
	shorttitle = {{DIN}	{EN} {ISO}/{IEC} 27001:2017},
	url = {https://perinorm-fr.redi-bw.de/perinorm/fulltext.ashx?fulltextid=b13c1f6be2f04f0298a6f7c96b1bbad1&userid=96f4b659-56a0-45ff-a5be-da1774bd04e8},
	abstract = {Dieses Dokument gilt für alle Organisationsarten (z. B. Handelsunternehmen, Regierungsstellen, gemeinnützige Gesellschaften). Dieses Dokument legt die Anforderungen an Aufstellen, Umsetzen, Betrieb, Überwachung, Bewertung, Wartung und Verbesserung von dokumentierten Informationssicherheit-Managementsystemen in Bezug auf die allgemeinen Geschäftsrisiken einer Organisation fest. Es legt außerdem die Anforderungen an die Einführung von auf die Bedürfnisse einer Organisation oder Teilen davon zugeschnittenen Sicherheitskontrollen fest. Das Informationssicherheits-Managementsystem ist dafür entwickelt worden, die Auswahl ausreichender und angemessener Sicherheitskontrollen zu gewährleisten, die den Informationsbestand sichern und interessierten Partnern Vertrauenswürdigkeit vermitteln.},
	language = {deutsch},
	publisher = {Beuth Verlag GmbH},
	author = {DIN	Deutsches Institut für Normung, e. V.},
	month = feb,
	year = {2020}
}

@misc{dindeutsches_institut_fur_normung_informationstechnik_2020-1,
	title = {Informationstechnik - {Cloud} {Computing} - {Referenzarchitektur} ({ISO}/{IEC} 17789:2014)},
	shorttitle = {{ISO}/{IEC} 17789:2014},
	url = {https://perinorm-fr.redi-bw.de/perinorm/fulltext.ashx?fulltextid=230150cb1880449295f493e21a445a20&userid=96f4b659-56a0-45ff-a5be-da1774bd04e8},
	abstract = {Diese Norm (Deutsche Fassung von ISO/IEC 17789) spezifiziert eine Cloud Computing-Referenzarchitektur (CCRA). Die Referenzarchitektur umfasst Cloud Computing-Funktionen, Cloud Computing-Aktivitäten sowie Cloud Computing-Funktionskomponenten und ihre Beziehungen untereinander.},
	language = {deutsch},
	publisher = {Beuth Verlag GmbH},
	author = {DIN	Deutsches Institut für Normung, e. V.},
	month = feb,
	year = {2020}
}

@misc{gesamtverband_der_deutschen_versicherungswirtschaft_e.v_lagebericht_2019,
	title = {Lagebericht {Cyberschutz} 2019},
	url = {https://www.gdv.de/resource/blob/51964/8f1abe21c50eeeb5e3109a93d7504f55/download-lagebericht-cyberschutz-2019-data.pdf},
	language = {deutsch},
	urldate = {2020-03-03},
	publisher = {Gesamtverband der Deutschen Versicherungswirtschaft e. V},
	author = {{Gesamtverband der Deutschen Versicherungswirtschaft e. V}},
	year = {2019}
}

@book{kumar_reliability_2018,
	address = {Singapore},
	title = {Reliability aspect of cloud computing environment},
	isbn = {9789811330230 9789811330223},
	url = {https://doi.org/10.1007/978-981-13-3023-0},
	language = {eng},
	publisher = {Springer},
	author = {Kumar, Vikas and Vidhyalakshmi, R.},
	year = {2018}
}

@misc{bundesministerium_des_innern_handbuch_2018,
	title = {Handbuch für
Organisationsuntersuchungen und
Personalbedarfsermittlung},
	url = {https://www.orghandbuch.de/OHB/DE/ohb_pdf.pdf;jsessionid=BA4D6325C542EB354B7E9525257C1A15.1_cid332?__blob=publicationFile&v=28},
	language = {German},
	urldate = {2020-02-25},
	journal = {Handbuch für
Organisationsuntersuchungen und
Personalbedarfsermittlung},
	author = {Bundesministerium des Innern and Bundesverwaltungsamt (Hrsg.)},
	year = {2018}
}

@book{ramachandran_requirements_2017,
	title = {Requirements {Engineering} for {Service} and {Cloud} {Computing}},
	isbn = {9783319513102},
	url = {https://doi.org/10.1007/978-3-319-51310-2},
	abstract = {This authoritative text/reference describes the state of the art in requirements engineering for software systems for distributed computing. A particular focus is placed on integrated solutions, which take into account the requirements of scalability, flexibility, sustainability and operability for distributed environments. Topics and features: Discusses the latest developments, tools, technologies and trends in software requirements engineering Reviews the relevant theoretical frameworks, practical approaches and methodologies for service requirements Examines the three key components of the requirements engineering process, namely requirements elicitation, requirements specification, and requirements validation and evaluation Presents detailed contributions from an international selection of highly reputed experts in the field Offers guidance on best practices, and suggests directions for further research in the area This illuminating volume is ideal for all researchers, lecturers and students wishing to enhance their knowledge of the technologies, methods and frameworks relevant to requirements engineering for distributed environments. Software engineers and project managers interested in adopting the latest approaches will also find this book a helpful and practical reference. Dr. Muthu Ramachandran is a Principal Lecturer in the School of Computing, Creative Technologies, and Engineering at Leeds Beckett University, UK. Prof. Zaigham Mahmood is a Senior Technology Consultant at Debesis Education UK and an Associate Lecturer (Research) at the University of Derby, UK. He also holds positions as Foreign Professor at NUST and IIU in Islamabad, Pakistan, and Professor Extraordinaire at the North West University Potchefstroom, South Africa.},
	language = {English},
	urldate = {2020-02-24},
	author = {Ramachandran, Muthu and Mahmood, Zaigham},
	year = {2017},
	note = {OCLC: 1003956978}
}

@book{hull_requirements_2011,
	address = {London ; New York},
	edition = {3rd ed},
	title = {Requirements engineering},
	isbn = {9781849964043 9781849964050},
	publisher = {Springer},
	author = {Hull, Elizabeth and Jackson, Ken and Dick, Jeremy},
	year = {2011},
	keywords = {Systems engineering}
}

@book{ieee_computer_society_ieee_2005,
	address = {New York, N.Y.},
	title = {{IEEE} standard for application and management of the systems engineering process},
	isbn = {9780738146928},
	url = {http://ieeexplore.ieee.org/servlet/opac?punumber=10106},
	language = {English},
	urldate = {2020-02-24},
	publisher = {Institute of Electrical and Electronics Engineers},
	author = {{IEEE Computer Society} and {Software and Systems Engineering Standards Committee} and {Institute of Electrical and Electronics Engineers} and {IEEE-SA Standards Board}},
	year = {2005},
	note = {OCLC: 62077967}
}

@misc{dindeutsches_institut_fur_normung_qualitatsmanagementsysteme_2020,
	title = {Qualitätsmanagementsysteme - {Grundlagen} und {Begriffe} ({ISO} 9000:2015); {Deutsche} und {Englische} {Fassung} {EN} {ISO} 9000:2015},
	shorttitle = {{DIN} {EN} {ISO} 9000:2015},
	url = {https://perinorm-fr.redi-bw.de/perinorm/fulltext.ashx?fulltextid=230150cb1880449295f493e21a445a20&userid=96f4b659-56a0-45ff-a5be-da1774bd04e8},
	abstract = {Diese Internationale Norm beschreibt die grundlegenden Konzepte, Grundsätze und Begriffe des Qualitätsmanagements und legt zugehörige Begriffe fest, die auf folgende allgemein anwendbar sind: - Organisationen, die nach nachhaltigem Erfolg durch Umsetzung von Qualitäts- und anderen Managementsystemen streben; - Kunden, die das Vertrauen in die Fähigkeit einer Organisation zur Bereitstellung zufriedenstellender Produkte suchen; - Organisationen, die Vertrauen in ihre Lieferkette erwerben wollen, dass ihre Produktanforderungen erfüllt werden; - alle interessierten Parteien, die danach streben, die Kommunikation durch allgemeines Verständnis der im Qualitätsmanagement verwendeten Begriffe zu verbessern; - Organisationen, die Konformitätsbewertungen nach den Anforderungen von ISO 9001 durchführen; - alle, die Schulungen zum Qualitätsmanagement anbieten; - Entwickler in Bezug stehender Normen.},
	language = {deutsch},
	publisher = {Beuth Verlag GmbH},
	author = {DIN	Deutsches Institut für Normung, e. V.},
	month = feb,
	year = {2020}
}

@misc{fowler_bliki:_2015,
	title = {bliki: {DevOpsCulture}},
	shorttitle = {bliki},
	url = {https://martinfowler.com/bliki/DevOpsCulture.html},
	abstract = {Devops is a movement to break down traditional silos between developers, operations and other delivery groups. Although many tools are useful, it is primarily a cultural change.},
	urldate = {2020-02-19},
	journal = {martinfowler.com},
	author = {Fowler, Martin},
	month = jul,
	year = {2015}
}

@misc{fowler_continuous_2006,
	title = {Continuous {Integration}},
	url = {https://martinfowler.com/articles/continuousIntegration.html},
	abstract = {Continuous Integration occurs when all developers push their changes to mainline at least once per day, with automated tests to detect integration errors. This greatly reduces integration pain.},
	urldate = {2020-02-24},
	journal = {martinfowler.com},
	author = {Fowler, Martin},
	month = may,
	year = {2006}
}

@book{shipley_openshift_2016,
	address = {Beijing},
	edition = {First edition},
	title = {{OpenShift} for developers: a guide for impatient beginners},
	isbn = {9781491961438},
	shorttitle = {{OpenShift} for developers},
	publisher = {O'Reilly},
	author = {Shipley, Grant and Dumpleton, Graham},
	year = {2016},
	keywords = {Web site development}
}

@book{picozzi_devops_2017,
	address = {Beijing},
	edition = {First edition},
	title = {{DevOps} with {OpenShift}: cloud deployments made easy},
	isbn = {9781491975961},
	shorttitle = {{DevOps} with {OpenShift}},
	publisher = {O'Reilly},
	author = {Picozzi, Stefano},
	year = {2017},
	keywords = {Development Computer programs, Web applications}
}

@article{lehtonen_ning_2015,
	title = {Deﬁning {Metrics} for {Continuous} {Delivery} and {Deployment} {Pipeline}},
	url = {https://pdfs.semanticscholar.org/b9a5/63731397fdb0a0cf277485673f741826b7b4.pdf},
	abstract = {Continuous delivery is a software development practice where new features are made available to end users as soon as they have been implemented and tested. In such a setting, a key technical piece of infrastructure is the development pipeline that consists of various tools and databases, where features ﬂow from development to deployment and then further to use. Metrics, unlike those conventionally used in software development, are needed to help deﬁne the performance of the development pipeline. In this paper, we address metrics that are suited for supporting continuous delivery and deployment through a descriptive and exploratory single case study on a project of a mid-sized Finnish software company, Solita Plc. As concrete data, we use data from project ”Lupapiste”, a web site for managing municipal authorizations and permissions.},
	language = {en},
	author = {Lehtonen, Timo and Suonsyrja, Sampo and Kilamo, Terhi and Mikkonen, Tommi},
	year = {2015},
	pages = {15}
}

@book{jaekel_cloud_2018,
	address = {New York, NY},
	title = {Cloud logistics},
	isbn = {9783658228361},
	publisher = {Springer Berlin Heidelberg},
	author = {Jaekel, Falco},
	year = {2018}
}

@book{garbarino_beginning_2020,
	address = {S.l.},
	title = {{BEGINNING} {KUBERNETES} {ON} {THE} {GOOGLE} {CLOUD} {PLATFORM} a guide to automating application deployment,... scaling, and management.},
	isbn = {9781484254912},
	url = {https://library.smu.ca/login?url=http://link.springer.com/10.1007/978-1-4842-5491-2},
	language = {English},
	urldate = {2020-02-24},
	publisher = {APRESS},
	author = {GARBARINO, ERNESTO},
	year = {2020},
	note = {OCLC: 1137811321}
}

@book{caban_architecting_2019,
	address = {Berkeley, CA},
	title = {Architecting and {Operating} {OpenShift} {Clusters} {OpenShift} for {Infrastructure} and {Operations} {Teams}},
	isbn = {9781484249857 9781484249840 9781484249864},
	url = {https://link.springer.com/10.1007/978-1-4842-4985-7},
	abstract = {Design and architect resilient OpenShift clusters and gain a keen understanding of how hundreds of projects are integrated into a powerful solution. While there are many OpenShift resources available for developers, this book focuses on the key elements of infrastructure and operations that teams need when looking to integrate and maintain this platform. You'll review important concepts, such as repeatable deployment techniques, advanced OpenShift RBAC capabilities, monitoring clusters, and integrating with external services. You'll also see how to run specialized workloads in OpenShift and how to deploy non-web based applications on the platform, all designed to help cultivate best practices as your organization continue evolve in microservices architectures. OpenShift has become the main enterprise Kubernetes distribution and its market penetration continues to growth at rapid rate. While OpenShift's documentation provides a great list of configuration options to work with the platform, it can be a daunting task to wade through. Architecting and Operating OpenShift Clusters breaks this content down into clear and useful concepts to provide you with a solid understanding of the OCP internal architecture.},
	language = {English},
	urldate = {2020-02-24},
	publisher = {Apress : Imprint: Apress},
	author = {Caban, William},
	year = {2019},
	note = {OCLC: 1138978697}
}

@misc{dindeutsches_institut_fur_normung_informationstechnik_2020-2,
	title = {Informationstechnik - {Cloud} {Computing} - Übersicht und {Vokabular} ({ISO}/{IEC} 17788:2014)},
	shorttitle = {{ISO}/{IEC} 17788:2014},
	url = {https://perinorm-fr.redi-bw.de/perinorm/fulltext.ashx?fulltextid=94c35b8fadfc4c51853726beaf30dda2&userid=96f4b659-56a0-45ff-a5be-da1774bd04e8},
	abstract = {Diese Norm (Deutsche Fassung von ISO/IEC 17788) bietet einen Überblick über Cloud Computing und definiert verwandte Begriffe. Die Begriffe in diesem Standard stellen häufig verwendete Begriffe und Definitionen in Cloud Computing-Standards dar ohne dabei alle in Cloud Computing-Standards verwendete Begriffe und Definitionen abzudecken oder die Definition von zusätzlichen Begriffen auszuschließen.},
	language = {deutsch},
	publisher = {Beuth Verlag GmbH},
	author = {DIN	Deutsches Institut für Normung, e. V.},
	month = feb,
	year = {2020}
}

@book{yeluri_building_2014,
	address = {New York, NY},
	series = {The expert's voice in internet security},
	title = {Building the infrastructure for cloud security: a solutions view},
	isbn = {9781430261469 9781430261452},
	shorttitle = {Building the infrastructure for cloud security},
	language = {eng},
	publisher = {Apress},
	author = {Yeluri, Raghu and Castro-Leon, Enrique},
	year = {2014},
	note = {OCLC: 891511273}
}

@inproceedings{el-gazzar_literature_2014,
	address = {Berlin, Heidelberg},
	series = {{IFIP} {Advances} in {Information} and {Communication} {Technology}},
	title = {A {Literature} {Review} on {Cloud} {Computing} {Adoption} {Issues} in {Enterprises}},
	isbn = {9783662434598},
	doi = {10.1007/978-3-662-43459-8_14},
	abstract = {Cloud computing has received increasing interest from enterprises since its inception. With its innovative information technology (IT) services delivery model, cloud computing could add technical and strategic business value to enterprises. However, cloud computing poses highly concerning internal (e.g., Top management and experience) and external issues (e.g., regulations and standards). This paper presents a systematic literature review to explore the current key issues related to cloud computing adoption. This is achieved by reviewing 51 articles published about cloud computing adoption. Using the grounded theory approach, articles are classified into eight main categories: internal, external, evaluation, proof of concept, adoption decision, implementation and integration, IT governance, and confirmation. Then, the eight categories are divided into two abstract categories: cloud computing adoption factors and processes, where the former affects the latter. The results of this review indicate that enterprises face serious issues before they decide to adopt cloud computing. Based on the findings, the paper provides a future information systems (IS) research agenda to explore the previously under-investigated areas regarding cloud computing adoption factors and processes. This paper calls for further theoretical, methodological, and empirical contributions to the research area of cloud computing adoption by enterprises.},
	language = {en},
	booktitle = {Creating {Value} for {All} {Through} {IT}},
	publisher = {Springer},
	author = {El-Gazzar, Rania Fahim},
	editor = {Bergvall-Kåreborn, Birgitta and Nielsen, Peter Axel},
	year = {2014},
	keywords = {Cloud computing , adoption , enterprise },
	pages = {214--242}
}

@book{hill_guide_2013,
	address = {London ; New York},
	series = {Computer communications and networks},
	title = {Guide to cloud computing: principles and practice},
	isbn = {9781447146025 9781447146032},
	shorttitle = {Guide to cloud computing},
	publisher = {Springer},
	editor = {Hill, Richard},
	year = {2013},
	note = {OCLC: ocn807043821},
	keywords = {Cloud computing}
}

@article{durao_systematic_2014,
	title = {A systematic review on cloud computing},
	volume = {68},
	issn = {1573-0484},
	url = {https://doi.org/10.1007/s11227-014-1089-x},
	doi = {10.1007/s11227-014-1089-x},
	abstract = {Cloud computing is an ascending technology that has introduced a new paradigm by rendering a rational computational model possible. It has changed the dynamics of IT consumption by means of a model that provides on-demand services over the Internet. Unlike the traditional hosting service, cloud computing services are paid for per usage and may expand or shrink based on demand. Such services are, in general, fully managed by cloud providers that require users nothing but a personal computer and an Internet access. In recent years, this model has attracted the attention of researchers, investors and practitioners, many of whom have proposed a number of applications, structures and fundamentals of cloud computing, resulting in various definitions, requirements and models. Despite the interest and advances in the field, issues such as security and privacy, service layer agreement, resource sharing, and billing have opened up new questions about the real gains of the model. Although cloud computing is based on a 50-year-old business model, evidence from this study indicates that cloud computing still needs to expand and overcome present limitations that prevent the full use of its potential. In this study, we critically review the state of the art in cloud computing with the aim of identifying advances, gaps and new challenges.},
	language = {en},
	number = {3},
	urldate = {2020-02-24},
	journal = {The Journal of Supercomputing},
	author = {Durao, Frederico and Carvalho, Jose Fernando S. and Fonseka, Anderson and Garcia, Vinicius Cardoso},
	month = jun,
	year = {2014},
	pages = {1321--1346}
}

@book{furht_handbook_2010,
	address = {New York},
	title = {Handbook of cloud computing},
	isbn = {9781441965233 9781441965240},
	abstract = {Annotation Cloud computing has become a significant technology trend. Experts believe cloud computing is currently reshaping information technology and the IT marketplace. The advantages of using cloud computing include cost savings, speed to market, access to greater computing resources, high availability, and scalability.Handbook of Cloud Computing includes contributions from world experts in the field of cloud computing from academia, research laboratories and private industry. This book presents the systems, tools, and services of the leading providers of cloud computing; including Google, Yahoo, Amazon, IBM, and Microsoft. The basic concepts of cloud computing and cloud computing applications are also introduced. Current and future technologies applied in cloud computing are also discussed. Case studies, examples, and exercises are provided throughout. Handbook of Cloud Computing is intended for advanced-level students and researchers in computer science and electrical engineering as a reference book. This handbook is also beneficial to computer and system infrastructure designers, developers, business managers, entrepreneurs and investors within the cloud computing related industry},
	publisher = {Springer},
	editor = {Furht, Borivoje and Escalante, Armando},
	year = {2010},
	note = {OCLC: ocn639164885},
	keywords = {Cloud computing}
}

@book{bengel_masterkurs_2015,
	address = {Wiesbaden},
	edition = {2., erw. und aktualisierte Aufl},
	series = {Lehrbuch},
	title = {Masterkurs parallele und verteilte {Systeme}: {Grundlagen} und {Programmierung} von {Multicore}-{Prozessoren}, {Multiprozessoren}, {Cluster}, {Grid} und {Cloud}},
	isbn = {9783834821515 9783834816719},
	shorttitle = {Masterkurs parallele und verteilte {Systeme}},
	language = {ger},
	publisher = {Springer Vieweg},
	editor = {Bengel, Günther and Baun, Christian and Kunze, Marcel and Stucky, Karl-Uwe},
	year = {2015},
	note = {OCLC: 913050632}
}

@book{vossen_cloud-computing_2012,
	address = {Heidelberg},
	edition = {1. Aufl},
	title = {Cloud-{Computing} für {Unternehmen}: technische, wirtschaftliche, rechtliche und organisatorische {Aspekte}},
	isbn = {9783898648080},
	shorttitle = {Cloud-{Computing} für {Unternehmen}},
	language = {ger},
	publisher = {dpunkt-Verl},
	author = {Vossen, Gottfried and Haselmann, Till and Hoeren, Thomas and Hoeren, T.},
	year = {2012},
	note = {OCLC: 796204713}
}

@book{hightower_kubernetes:_2017,
	address = {Sebastopol, CA},
	edition = {First edition},
	title = {Kubernetes: up and running: dive into the future of infrastructure},
	isbn = {9781491935675},
	shorttitle = {Kubernetes},
	url = {http://proquest.tech.safaribooksonline.de/9781491935668},
	publisher = {O'Reilly Media},
	author = {Hightower, Kelsey and Burns, Brendan and Beda, Joe},
	year = {2017},
	note = {OCLC: on1006379326},
	keywords = {Application software, Computer software, Development Automation, Installation, Open source software, Software maintenance, Virtual computer systems}
}

@book{burns_verteilte_2018,
	address = {Heidelberg},
	edition = {1. Auflage},
	title = {Verteilte {Systeme} mit {Kubernetes} entwerfen: {Patterns} und {Prinzipien} für skalierbare und zuverlässige {Services} = {Designing} distributed systems},
	isbn = {9783960102403 9783960090885 9783960102410 9783960102427},
	shorttitle = {Verteilte {Systeme} mit {Kubernetes} entwerfen},
	url = {https://ebookcentral.proquest.com/lib/gbv/detail.action?docID=5535040},
	language = {ger},
	publisher = {O'Reilly},
	author = {Burns, Brendan},
	translator = {Demmig, Thomas},
	year = {2018},
	note = {OCLC: 1043089881}
}

@book{liebel_skalierbare_2019,
	address = {Bonn},
	edition = {2., aktualisierte und erweiterte Auflage},
	series = {Rheinwerk {Computing}},
	title = {Skalierbare {Container}-{Infrastrukturen}: das {Handbuch} für {Administratoren}},
	isbn = {9783836263856},
	shorttitle = {Skalierbare {Container}-{Infrastrukturen}},
	language = {ger},
	publisher = {Rheinwerk Verlag},
	author = {Liebel, Oliver},
	year = {2019},
	note = {OCLC: 1043087681}
}

@book{hightower_kubernetes:_2018,
	address = {Heidelberg},
	edition = {1. Auflage},
	title = {Kubernetes: eine kompakte {Einführung}},
	isbn = {9783960884286 9783864905421 9783960884293 9783960884309},
	shorttitle = {Kubernetes},
	language = {ger},
	publisher = {dpunkt.verlag},
	author = {Hightower, Kelsey and Burns, Brendan and Beda, Joe},
	translator = {Demmig, Thomas},
	year = {2018},
	note = {OCLC: 1011040342}
}

@book{cochrane_docker_2018,
	title = {Docker cookbook: over 100 practical and insightful recipes to build distributed applications with {Docker}},
	isbn = {9781788625982},
	shorttitle = {Docker cookbook},
	url = {http://proquest.safaribooksonline.com/?fpi=9781788626866},
	language = {English},
	urldate = {2020-02-20},
	author = {Cochrane, Ken and Khare, Neependra and Chelladhurai, Jeeva S},
	year = {2018},
	note = {OCLC: 1055555634}
}

@book{ibryam_kubernetes_2020,
	title = {Kubernetes {Patterns}: wiederverwendbare {Muster} zum {Erstellen} von {Cloud}-nativen {Anwendungen}},
	isbn = {9783960091325},
	shorttitle = {Kubernetes {Patterns}},
	language = {German},
	author = {Ibryam, Bilgin and Huß, Roland and Demmig, Thomas},
	year = {2020},
	note = {OCLC: 1140158171}
}

@book{pathania_learning_2016,
	address = {Birmingham, UK},
	title = {Learning continuous integration with {Jenkins} a beginner's guide to implementing continuous integration and continuous delivery using {Jenkins}},
	isbn = {978-1-78528-503-5 978-1-78528-483-0},
	language = {English},
	publisher = {Packt Publishing},
	author = {Pathania, Nikhil},
	year = {2016},
	note = {OCLC: 1047819561}
}

@book{duvall_continuous_2007,
	address = {Upper Saddle River, NJ},
	series = {Addison-{Wesley} signature series},
	title = {Continuous integration: improving software quality and reducing risk},
	isbn = {978-0-321-33638-5},
	shorttitle = {Continuous integration},
	publisher = {Addison-Wesley},
	author = {Duvall, Paul M. and Matyas, Steve and Glover, Andrew},
	year = {2007},
	note = {OCLC: ocn122423674},
	keywords = {Computer software, Quality control, Reliability, Testing}
}

@book{kim_devops-handbuch:_2017,
	address = {Heidelberg},
	edition = {1. Auflage},
	title = {Das {DevOps}-{Handbuch}: {Teams}, {Tools} und {Infrastrukturen} erfolgreich umgestalten},
	isbn = {978-3-96009-047-2},
	shorttitle = {Das {DevOps}-{Handbuch}},
	language = {ger},
	publisher = {O'Reilly},
	author = {Kim, Gene},
	collaborator = {Humble, Jez and Debois, Patrick and Willis, John and Demmig, Thomas},
	year = {2017},
	keywords = {DevOps, Entwicklung, Informationstechnik, Prozessoptimierung}
}

@article{pahl_containerization_2015,
	title = {Containerization and the {PaaS} {Cloud}},
	volume = {2},
	issn = {2372-2568},
	doi = {10.1109/MCC.2015.51},
	abstract = {Containerization is widely discussed as a lightweight virtualization solution. Apart from exhibiting benefits over traditional virtual machines in the cloud, containers are especially relevant for platform-as-a-service (PaaS) clouds to manage and orchestrate applications through containers as an application packaging mechanism. This article discusses the requirements that arise from having to facilitate applications through distributed multicloud platforms.},
	number = {3},
	journal = {IEEE Cloud Computing},
	author = {Pahl, Claus},
	month = may,
	year = {2015},
	keywords = {Computer architecture, Containerization, Docker, File systems, Kubernetes, Linux, PaaS, PaaS cloud, Packaging, Virtualization, application packaging mechanism, cloud, cloud computing, cluster, container, containerization, distributed multicloud platform, distributed processing, lightweight virtualization solution, multicloud, platform-as-a-service, virtual machine, virtual machines, virtualisation, virtualization},
	pages = {24--31}
}

@book{gulati_openshift_2014,
	title = {{OpenShift} {Cookbook}},
	isbn = {978-1-78398-121-2},
	url = {https://proquest.tech.safaribooksonline.de/9781783981205},
	abstract = {Over 100 hands-on recipes that will help you create, deploy, manage, and scale OpenShift applicationsIn DetailIt is important to hit the ground running with the creation and deployment of your OpenShift applications. This book will start by showing you how to create OpenShift applications, use different databases with your applications, and deal with your applications based on your background as a developer. All bases have been covered with very extensive sections on the Java, Python, and Node platforms. Your enlightening quest into OpenShift will conclude with a discussion on how to continuously integrate and deploy your apps using Jenkins, and how OpenShift can help you build horizontally scalable applications.This comprehensive cookbook will show the trainee OpenShift developer a huge number of recipes, solutions, tips, and tricks to improve their experience and enhance their expertise.What You Will LearnTeach you how to create and deploy your own Java EE and Spring applications using OpenShiftHelp you discover how to host your Node.js applicationsGuide you through developing and deploying Python web applicationsLearn the trade of building horizontally scalable applications with OpenShiftShow you how to store your periodic database backup to Amazon S3Leverage the rhc command-line tool to become efficient with OpenShiftLearn how to effectively use Jenkins with OpenShift applications},
	language = {en},
	urldate = {2020-02-19},
	publisher = {Packt Publishing},
	author = {Gulati, Shekhar},
	month = oct,
	year = {2014}
}

@book{saito_devops_2017,
	title = {{DevOps} with {Kubernetes}},
	isbn = {978-1-78839-800-8},
	url = {https://proquest.tech.safaribooksonline.de/9781788396646},
	abstract = {Learn to implement DevOps using Docker \& Kubernetes.About This BookLearning DevOps, container, and Kubernetes within one book.Leverage Kubernetes as a platform to deploy, scale, and run containers efficiently.A practical guide towards container management and orchestrationWho This Book Is ForThis book is targeted for anyone, who wants to learn containerization and clustering in a practical way using Kubernetes. No prerequisite skills required, however, essential DevOps skill and public/private Cloud knowledge will accelerate the reading speed. If you’re advanced readers, you can also get a deeper understanding of all the tools and technique described in the book.What You Will LearnLearn fundamental and advanced DevOps skills and toolsGet a comprehensive understanding for containerLearn how to move your application to container worldLearn how to manipulate your application by KubernetesLearn how to work with Kubernetes in popular public cloudImprove time to market with Kubernetes and Continuous DeliveryLearn how to monitor, log, and troubleshoot your application with KubernetesIn DetailContainerization is said to be the best way to implement DevOps. Google developed Kubernetes, which orchestrates containers efficiently and is considered the frontrunner in container orchestration. Kubernetes is an orchestrator that creates and manages your containers on clusters of servers. This book will guide you from simply deploying a container to administrate a Kubernetes cluster, and then you will learn how to do monitoring, logging, and continuous deployment in DevOps. The initial stages of the book will introduce the fundamental DevOps and the concept of containers. It will move on to how to containerize applications and deploy them into. The book will then introduce networks in Kubernetes. We then move on to advanced DevOps skills such as monitoring, logging, and continuous deployment in Kubernetes. It will proceed to introduce permission control for Kubernetes resources via attribute-based access control and role-based access control. The final stage of the book will cover deploying and managing your container clusters on the popular public cloud Amazon Web Services and Google Cloud Platform. At the end of the book, other orchestration frameworks, such as Docker Swarm mode, Amazon ECS, and Apache Mesos will be discussed.Style and approachReaders will be taken through fundamental DevOps skills and Kubernetes concept and administration with detailed examples. It introduces comprehensive DevOps topics, including microservices, automation tools, containers, monitoring, logging, continuous delivery, and popular public cloud environments. At each step readers will learn how to leverage Kubernetes in their everyday lives and transform their original delivery pipeline for fast and efficient delivery.Downloading the example code for this book. You can download the example code files for all Packt books you have purchased from your account at http://www.PacktPub.com. If you purchased this book elsewhere, you can visit http://www.PacktPub.com/support and register to have the code file.},
	language = {en},
	urldate = {2020-02-19},
	publisher = {Packt Publishing},
	author = {Saito, Hideto and Lee, Hui-Chuan Chloe and Wu, Cheng-Yang},
	month = oct,
	year = {2017}
}

@book{luksa_kubernetes_2018,
	address = {München},
	title = {Kubernetes in {Action}: {Anwendungen} in {Kubernetes}-{Clustern} bereitstellen und verwalten},
	isbn = {978-3-446-45510-8 978-3-446-45602-0},
	shorttitle = {Kubernetes in {Action}},
	language = {ger},
	publisher = {Hanser},
	author = {Lukša, Marko},
	year = {2018},
	note = {OCLC: 1017485179}
}

@book{sharma_getting_2020,
	address = {Berkeley, CA},
	title = {Getting {Started} with {Istio} {Service} {Mesh}: {Manage} {Microservices} in {Kubernetes}},
	isbn = {978-1-4842-5457-8 978-1-4842-5458-5},
	shorttitle = {Getting {Started} with {Istio} {Service} {Mesh}},
	url = {http://link.springer.com/10.1007/978-1-4842-5458-5},
	language = {en},
	urldate = {2020-02-19},
	publisher = {Apress},
	author = {Sharma, Rahul and Singh, Avinash},
	year = {2020},
	doi = {10.1007/978-1-4842-5458-5}
}

@book{baun_cloud_2010,
	address = {Berlin},
	series = {Informatik im {Fokus}},
	title = {Cloud {Computing}: web-basierte dynamische {IT}-{Services}},
	isbn = {978-3-642-01593-9 978-3-642-01594-6},
	shorttitle = {Cloud {Computing}},
	language = {de},
	publisher = {Springer},
	editor = {Baun, Christian},
	year = {2010},
	note = {OCLC: 552137459}
}

@inproceedings{qian_cloud_2009,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Cloud {Computing}: {An} {Overview}},
	isbn = {978-3-642-10665-1},
	shorttitle = {Cloud {Computing}},
	doi = {10.1007/978-3-642-10665-1_63},
	abstract = {In order to support the maximum number of user and elastic service with the minimum resource, the Internet service provider invented the cloud computing. within a few years, emerging cloud computing has became the hottest technology. From the publication of core papers by Google since 2003 to the commercialization of Amazon EC2 in 2006, and to the service offering of AT\&T Synaptic Hosting, the cloud computing has been evolved from internal IT system to public service, from cost-saving tools to revenue generator, and from ISP to telecom. This paper introduces the concept, history, pros and cons of cloud computing as well as the value chain and standardization effort.},
	language = {en},
	booktitle = {Cloud {Computing}},
	publisher = {Springer},
	author = {Qian, Ling and Luo, Zhiguo and Du, Yujian and Guo, Leitao},
	editor = {Jaatun, Martin Gilje and Zhao, Gansen and Rong, Chunming},
	year = {2009},
	keywords = {Cloud Storage, Cloud computing, Virtualization},
	pages = {626--631}
}

@book{mcgrath_understanding_2012,
	title = {Understanding {PaaS}},
	isbn = {978-1-4493-2342-4},
	url = {https://proquest.safaribooksonline.com/9781449323400},
	abstract = {The least understood feature of cloud computing, Platform as a Service (PaaS), is also the most powerful and cost effective. This concise overview shows you why organizations that properly wield PaaS can quickly gain a strong competitive advantage. You’ll learn how PaaS enables developers to pursue low cost R\&D projects, lets system administrators focus on systems rather than servers, and helps architects evaluate new technology quickly and directly.Many reliable PaaS providers are available today, including services from Amazon, Red Hat, and Google. This book offers valuable advice for technically and not-so-technically minded people who want to understand how PaaS can change the way organizations do computing.Get rudimentary examples of how to initiate projects with a typical PaaS providerConsider language selection, feature set, and general capabilities when evaluating a PaaS solutionAutomate tasks like continuous integration, unit tests, and buildsLearn how to design applications by understanding how PaaS works under the hoodDiscover the critical difference between scaling up and scaling outAnticipate subtle but important differences between traditional computing and PaaS computingChange the way you think about security in the cloud},
	language = {en},
	urldate = {2020-02-19},
	publisher = {O'Reilly Media, Inc.},
	author = {McGrath, Michael P.},
	month = jan,
	year = {2012}
}

@book{alt_innovationsorientiertes_2017,
	address = {Wiesbaden},
	series = {Essentials},
	title = {Innovationsorientiertes {IT}-{Management} mit {DevOps}: {IT} im {Zeitalter} von {Digitalisierung} und {Software}-defined {Business}},
	isbn = {978-3-658-18703-3 978-3-658-18704-0},
	shorttitle = {Innovationsorientiertes {IT}-{Management} mit {DevOps}},
	language = {en},
	publisher = {Springer Gabler},
	author = {Alt, Rainer and Auth, Gunnar and Kögler, Christoph},
	year = {2017},
	note = {OCLC: 992991783}
}

@article{combe_docker_2016,
	title = {To {Docker} or {Not} to {Docker}: {A} {Security} {Perspective}},
	volume = {3},
	issn = {2372-2568},
	shorttitle = {To {Docker} or {Not} to {Docker}},
	doi = {10.1109/MCC.2016.100},
	abstract = {The need for ever-shorter development cycles, continuous delivery, and cost savings in cloud-based infrastructures led to the rise of containers, which are more flexible than virtual machines and provide near-native performance. Among all container solutions, Docker, a complete packaging and software delivery tool, currently leads the market. This article gives an overview of the container ecosystem and discusses the Docker environment's security implications through realistic use cases. The authors define an adversary model, point out several vulnerabilities affecting current Docker usage, and discuss further research directions.},
	number = {5},
	journal = {IEEE Cloud Computing},
	author = {Combe, Theo and Martin, Antony and Di Pietro, Roberto},
	month = sep,
	year = {2016},
	keywords = {Cloud computing, Computer security, Containers, Cost benefit analysis, Docker, Docker environment security, Linux, Product life cycle management, Virtual networks, cloud computing, cloud-based infrastructures, container ecosystem, containers, packaging tool, security, security of data, security perspective, software delivery tool, software tools, virtualization},
	pages = {54--62}
}

@article{bernstein_containers_2014,
	title = {Containers and {Cloud}: {From} {LXC} to {Docker} to {Kubernetes}},
	volume = {1},
	issn = {2372-2568},
	shorttitle = {Containers and {Cloud}},
	doi = {10.1109/MCC.2014.51},
	abstract = {This issue's "Cloud Tidbit" focuses on container technology and how it's emerging as an important part of the cloud computing infrastructure. It looks at Docker, an open source project that automates the faster deployment of Linux applications, and Kubernetes, an open source cluster manager for Docker containers.},
	number = {3},
	journal = {IEEE Cloud Computing},
	author = {Bernstein, David},
	month = sep,
	year = {2014},
	keywords = {Cloud computing, Containers, Google, Home appliances, Linux, Runtime, Virtual machine monitors, cloud, containers, dockers, virtual machines},
	pages = {81--84}
}

@article{kharb_automated_2016,
	title = {Automated {Deployment} of {Software} {Containers} {Using} {Dockers}},
	volume = {4},
	abstract = {Over time, due to increased product functionalities, software projects have become more and more complex and along with increasing work completion pressures, the software projects are required to be accomplished in lesser amount of time but with fewer people. In this paper, our focus is on exploring the docker technology: from defining the basic characteristic features, their advantages and limitations to the question behind our minds related to its performance analysis: how docker could help in building better software and lead to some good reproducible research as compared to virtual machines. IT organizations could shrink application delivery from years to months and can achieve up to fifteen times greater efficiency in their use of computing resources by using Docker. Docker containers bind a block of module that contains everything it needs to run: the source code, output and libraries - anything that one can be installed on a domain: this ensures that it will always run similarly without any environmental constraints.},
	language = {en},
	number = {10},
	author = {Kharb, Dr Latika},
	year = {2016},
	pages = {3}
}

@book{humble_continuous_2010,
	title = {Continuous {Delivery}: {Reliable} {Software} {Releases} through {Build}, {Test}, and {Deployment} {Automation}, {Video} {Enhanced} {Edition}},
	isbn = {978-0-321-67025-0},
	shorttitle = {Continuous {Delivery}},
	url = {https://proquest.tech.safaribooksonline.de/9780321670250},
	abstract = {This is the Safari online edition of the printed book.Getting software released to users is often a painful, risky, and time-consuming process. This groundbreaking new book sets out the principles and technical practices that enable rapid, incremental delivery of high quality, valuable new functionality to users. Through automation of the build, deployment, and testing process, and improved collaboration between developers, testers, and operations, delivery teams can get changes released in a matter of hours—sometimes even minutes–no matter what the size of a project or the complexity of its code base. Jez Humble and David Farley begin by presenting the foundations of a rapid, reliable, low-risk delivery process. Next, they introduce the “deployment pipeline,” an automated process for managing all changes, from check-in to release. Finally, they discuss the “ecosystem” needed to support continuous delivery, from infrastructure, data and configuration management to governance. The authors introduce state-of-the-art techniques, including automated infrastructure management and data migration, and the use of virtualization. For each, they review key issues, identify best practices, and demonstrate how to mitigate risks. Coverage includesAutomating all facets of building, integrating, testing, and deploying softwareImplementing deployment pipelines at team and organizational levelsImproving collaboration between developers, testers, and operationsDeveloping features incrementally on large and distributed teamsImplementing an effective configuration management strategyAutomating acceptance testing, from analysis to implementationTesting capacity and other non-functional requirementsImplementing continuous deployment and zero-downtime releasesManaging infrastructure, data, components and dependenciesNavigating risk management, compliance, and auditing Whether you’re a developer, systems administrator, tester, or manager, this book will help your organization move from idea to release faster than ever—so you can deliver value to your business rapidly and reliably.},
	language = {en},
	urldate = {2020-01-24},
	publisher = {Addison-Wesley Professional},
	author = {Humble, Jez and Farley, David},
	month = jul,
	year = {2010}
}

@book{laster_continuous_2017,
	title = {Continuous {Integration} vs. {Continuous} {Delivery} vs. {Continuous} {Deployment}},
	isbn = {978-1-4920-2890-1},
	url = {https://proquest.tech.safaribooksonline.de/9781492028918},
	abstract = {Continuous integration, continuous delivery, and continuous deployment are key software delivery processes in a DevOps environment. But what does each one do for your product development and release cycles? Brent Laster explains what these terms really boil down to, and how they work separately and together to help your team release software.This powerful set of disciplines, best practices, and technologies automates the process of integrating and delivering source code changes from inception through production. Although their implementation may vary, these processes are necessary to ensure that software is released frequently, reliably, and with high quality.You’ll learn how:Continuous integration ensures that individual code changes are suitable for inclusion in the code base and merged in successfullyContinuous delivery assembles your product, automatically testing the quality and functionality along the way, and produces deliverables that are proven to be deployableContinuous deployment simplifies releasing the product to customers, whether it’s in the cloud, via download, or in some other format, while also allowing for limited deployments or rolling deployments back},
	language = {en},
	urldate = {2020-01-24},
	publisher = {O'Reilly Media, Inc.},
	author = {Laster, Brent},
	month = nov,
	year = {2017}
}

@article{fowler_continuous_nodate,
	title = {Continuous {Integration}},
	language = {en},
	author = {Fowler, Martin},
	pages = {14}
}

@inproceedings{soni_end_2015,
	title = {End to {End} {Automation} on {Cloud} with {Build} {Pipeline}: {The} {Case} for {DevOps} in {Insurance} {Industry}, {Continuous} {Integration}, {Continuous} {Testing}, and {Continuous} {Delivery}},
	shorttitle = {End to {End} {Automation} on {Cloud} with {Build} {Pipeline}},
	doi = {10.1109/CCEM.2015.29},
	abstract = {In modern environment, delivering innovative idea in a fast and reliable manner is extremely significant for any organizations. In the existing scenario, Insurance industry need to better respond to dynamic market requirements, faster time to market for new initiatives and services, and support innovative ways of customer interaction. In past few years, the transition to cloud platforms has given benefits such as agility, scalability, and lower capital costs but the application lifecycle management practices are slow with this disruptive change. DevOps culture extends the agile methodology to rapidly create applications and deliver them across environment in automated manner to improve performance and quality assurance. Continuous Integration (CI) and Continuous delivery (CD) has emerged as a boon for traditional application development and release management practices to provide the capability to release quality artifacts continuously to customers with continuously integrated feedback. The objective of the paper is to create a proof of concept for designing an effective framework for continuous integration, continuous testing, and continuous delivery to automate the source code compilation, code analysis, test execution, packaging, infrastructure provisioning, deployment, and notifications using build pipeline concept.},
	booktitle = {2015 {IEEE} {International} {Conference} on {Cloud} {Computing} in {Emerging} {Markets} ({CCEM})},
	author = {Soni, Mitesh},
	month = nov,
	year = {2015},
	note = {ISSN: null},
	keywords = {Automation, Cloud Computing, Cloud computing, Configuration Management, Configuration management, Continuous Delivery, Continuous Integration, Continuous Testing, DevOps, Insurance, Pipelines, Servers, Testing, agile methodology, build pipeline, cloud computing, code analysis, continuous delivery, continuous integration, continuous testing, end to end automation, infrastructure provisioning, insurance data processing, insurance industry, notifications, packaging, program diagnostics, program testing, software deployment, software prototyping, source code (software), source code compilation, test execution},
	pages = {85--89}
}

@article{ebert_devops_2016,
	title = {{DevOps}},
	volume = {33},
	issn = {1937-4194},
	doi = {10.1109/MS.2016.68},
	abstract = {Building on lean and agile practices, DevOps means end-to-end automation in software development and delivery. Hardly anybody will be able to approach it with a cookbook-style approach, but most developers will benefit from better connecting the previously isolated silos of development and operations. Many DevOps tools exist that can help them do this.},
	number = {3},
	journal = {IEEE Software},
	author = {Ebert, Christof and Gallardo, Gorka and Hernantes, Josune and Serrano, Nicolas},
	month = may,
	year = {2016},
	keywords = {AWS, Amazon Web Services, Ansible, Automation, Bamboo, Cacti, Chef, Cloud computing, DSL, DevOps, Gradle, Graylog2, Java, Jenkins, Logging, Loggly, Maven, Monitoring, Nagios, New Relic, Production, Puppet, TeamCity, apache Ant, configuration management, continuous integration, cookbook-style approach, microservices, software delivery, software development, software engineering},
	pages = {94--100}
}

@inproceedings{chen_continuous_2016,
	title = {Continuous {Delivery}: {Overcoming} {Adoption} {Obstacles}},
	shorttitle = {Continuous {Delivery}},
	doi = {10.1109/CSED.2016.023},
	abstract = {Continuous Delivery (CD) can bring huge benefits, but implementing CD is challenging. For some challenges, one can only see them when he/she travels on the journey far enough. Paddy Power has been implementing CD for more than three years. In this talk, I will present the major obstacles we encountered and how we addressed them. These obstacles cover various areas, including organizational, cultural, process, and technical. I will also discuss the areas where I see researchers can help.},
	booktitle = {2016 {IEEE}/{ACM} {International} {Workshop} on {Continuous} {Software} {Evolution} and {Delivery} ({CSED})},
	author = {Chen, Lianping},
	month = may,
	year = {2016},
	note = {ISSN: null},
	keywords = {Agile Software Development, CD, Companies, Conferences, Continuous Delivery, Continuous Deployment, Continuous Software Engineering, Cultural differences, Paddy Power, Software, Software engineering, Software reliability, adoption obstacles, continuous delivery, software engineering},
	pages = {84--84}
}

@inproceedings{chen_towards_2015,
	title = {Towards {Architecting} for {Continuous} {Delivery}},
	doi = {10.1109/WICSA.2015.23},
	abstract = {Continuous Delivery (CD) has emerged as an auspicious software development discipline, with the promise of providing organizations the capability to release valuable software continuously to customers. Our organization has been implementing CD for the last two years. Thus far, we have moved 22 software applications to CD. I observed that CD has created a new context for architecting these applications. In this paper, I will try to characterize such a context of CD, explain why we need to architect for CD, describe the implications of architecting for CD, and discuss the challenges this new context creates. This information can provide insights to other practitioners for architecting their software applications, and provide researchers with input for developing their research agendas to further study this increasingly important topic.},
	booktitle = {2015 12th {Working} {IEEE}/{IFIP} {Conference} on {Software} {Architecture}},
	author = {Chen, Lianping},
	month = may,
	year = {2015},
	note = {ISSN: null},
	keywords = {CD, Companies, Computer architecture, Context, DevOps, Monitoring, Pipelines, Software, Software reliability, architecturally significant requirements, auspicious software development discipline, continuous delivery, continuous deployment, continuous software engineering, non-functional requirements, quality attributes, software architecture},
	pages = {131--134}
}

@techreport{schermann_empirical_2016,
	title = {An empirical study on principles and practices of continuous delivery and deployment},
	url = {https://peerj.com/preprints/1889},
	abstract = {Despite substantial recent research activity related to continuous delivery and deployment (CD), there has not yet been a systematic, empirical study on how the practices often associated with continuous deployment have found their way into the broader software industry. This raises the question to what extent our knowledge of the area is dominated by the peculiarities of a small number of industrial leaders, such as Facebook. To address this issue, we conducted a mixed-method empirical study, consisting of a pre-study on literature, qualitative interviews with 20 software developers or release engineers with heterogeneous backgrounds, and a Web-based quantitative survey that attracted 187 complete responses. A major trend in the results of our study is that architectural issues are currently one of the main barriers for CD adoption. Further, feature toggles as an implementation technique for partial rollouts lead to unwanted complexity, and require research on better abstractions and modelling techniques for runtime variability. Finally, we conclude that practitioners are in need for more principled approaches to release decision making, e.g., which features to conduct A/B tests on, or which metrics to evaluate.},
	language = {en},
	number = {e1889v1},
	urldate = {2020-01-08},
	institution = {PeerJ Inc.},
	author = {Schermann, Gerald and Cito, Jürgen and Leitner, Philipp and Zdun, Uwe and Gall, Harald},
	month = mar,
	year = {2016},
	doi = {10.7287/peerj.preprints.1889v1}
}

@article{claps_journey_2015,
	title = {On the journey to continuous deployment: {Technical} and social challenges along the way},
	volume = {57},
	issn = {0950-5849},
	shorttitle = {On the journey to continuous deployment},
	url = {http://www.sciencedirect.com/science/article/pii/S0950584914001694},
	doi = {10.1016/j.infsof.2014.07.009},
	abstract = {Context
Continuous Deployment (CD) is an emerging software development process with organisations such as Facebook, Microsoft, and IBM successfully implementing and using the process. The CD process aims to immediately deploy software to customers as soon as new code is developed, and can result in a number of benefits for organisations, such as: new business opportunities, reduced risk for each release, and prevent development of wasted software. There is little academic literature on the challenges organisations face when adopting the CD process, however there are many anecdotal challenges that organisations have voiced on their online blogs.
Objective
The aim of this research is to examine the challenges faced by organisations when adopting CD as well as the strategies to mitigate these challenges.
Method
An explorative case study technique that involves in-depth interviews with software practitioners in an organisation that has adopted CD was conducted to identify these challenges.
Results
This study found a total of 20 technical and social adoption challenges that organisations may face when adopting the CD process. The results are discussed to gain a deeper understanding of the strategies employed by organisations to mitigate the impacts of these challenges.
Conclusion
While a number of individual technical and social adoption challenges were uncovered by the case study in this research, most challenges were not faced in isolation. The severity of these challenges were reduced by a number of mitigation strategies employed by the case study organisation. It is concluded that organisations need to be well prepared to handle technical and social adoption challenges with their existing expertise, processes and tools before adopting the CD process. For practitioners, knowing how to address the challenges an organisation may face when adopting the CD process provides a level of awareness that they previously may not have had.},
	language = {en},
	urldate = {2020-01-08},
	journal = {Information and Software Technology},
	author = {Claps, Gerry Gerard and Berntsson Svensson, Richard and Aurum, Aybüke},
	month = jan,
	year = {2015},
	keywords = {Agile software development, Challenges and mitigation strategies, Continuous deployment, Lean software development},
	pages = {21--31}
}

@article{leppanen_highways_2015,
	title = {The highways and country roads to continuous deployment},
	volume = {32},
	issn = {1937-4194},
	doi = {10.1109/MS.2015.50},
	abstract = {As part of a Finnish research program, researchers interviewed 15 information and communications technology companies to determine the extent to which the companies adopted continuous deployment. They also aimed to find out why continuous deployment is considered beneficial and what the obstacles are to its full adoption. The benefits mentioned the most often were the ability to get faster feedback, the ability to deploy more often to keep customers satisfied, and improved quality and productivity. Despite understanding the benefits, none of the companies adopted a fully automatic deployment pipeline. The companies also had higher continuous-deployment capability than what they practiced. In many cases, they consciously chose to not aim for full continuous deployment. Obstacles to full adoption included domain-imposed restrictions, resistance to change, customer desires, and developers' skill and confidence.},
	number = {2},
	journal = {IEEE Software},
	author = {Leppänen, Marko and Mäkinen, Simo and Pagels, Max and Eloranta, Veli-Pekka and Itkonen, Juha and Mäntylä, Mika V. and Männistö, Tomi},
	month = mar,
	year = {2015},
	keywords = {Continuous production, Finnish research program, Production, Software development, Software engineering, Testing, change resistance, continuous delivery, continuous deployment, continuous integration, continuous-deployment capability, customer desires, customer satisfaction, developers confidence, developers skill, domain-imposed restrictions, fully automatic deployment pipeline, information and communications technology companies, management of change, software development, software development management, software engineering, thematic analysis},
	pages = {64--72}
}

@article{chen_continuous_2015,
	title = {Continuous {Delivery}: {Huge} {Benefits}, but {Challenges} {Too}},
	volume = {32},
	issn = {1937-4194},
	shorttitle = {Continuous {Delivery}},
	doi = {10.1109/MS.2015.27},
	abstract = {Continuous delivery (CD) has emerged as an auspicious alternative to traditional release engineering, promising to provide the capability to release valuable software continuously to customers. Paddy Power has been implementing CD for the past two years. This article explains why Paddy Power decided to adopt CD, describes the resulting CD capability, and reports the huge benefits and challenges involved. These experiences can provide fellow practitioners with insights for their adoption of CD, and the identified challenges can provide researchers valuable input for developing their research agendas.},
	number = {2},
	journal = {IEEE Software},
	author = {Chen, Lianping},
	month = mar,
	year = {2015},
	keywords = {CD capability, Companies, Context modeling, Continuous production, DevOps, Paddy Power, Pipelines, Software development, Software engineering, Testing, continuous delivery, continuous software engineering, release engineering, research agendas, research and development, software deployment, software development management, software engineering, valuable software},
	pages = {50--54}
}

@inproceedings{neely_continuous_2013,
	title = {Continuous {Delivery}? {Easy}! {Just} {Change} {Everything} ({Well}, {Maybe} {It} {Is} {Not} {That} {Easy})},
	shorttitle = {Continuous {Delivery}?},
	doi = {10.1109/AGILE.2013.17},
	abstract = {Rally Software transitioned from shipping code every eight-weeks, with time-boxed Scrum sprints, to a model of continuous delivery with Kanban. The team encountered complex challenges with their build systems, automated test suites, customer enablement, and internal communication. But there was light at the end of the tunnel - greater control and flexibility over feature releases, incremental delivery of value, lower risks, fewer defects, easier on-boarding of new developers, less off-hours work, and a considerable up tick in confidence. This experience report describes the journey to continuous delivery with the aim that others can learn from our mistakes and get their teams deploying more frequently. We will describe and contrast this transition from the business (product management) and engineering perspectives.},
	booktitle = {2013 {Agile} {Conference}},
	author = {Neely, Steve and Stolt, Steve},
	month = aug,
	year = {2013},
	note = {ISSN: null},
	keywords = {Companies, Kanban, Monitoring, Planning, Production, Rally Software, Software, Testing, automated test suites, automatic test software, business product management, continuous software delivery, customer enablement, incremental delivery, internal communication, kanban, shipping code, software engineering, time-boxed Scrum sprints},
	pages = {121--128}
}